WCF125. const和readonly之间有什么区别？

const声明的字段不能使用static修饰符，而readonly可以使用static修饰符。

const字段只能在声明时初始化，而readonly可以在声明时或在构造函数中初始化。

const字段的值在设计时就计算出来了，而readonly的值在运行时计算。



121. 抽象方法和虚方法之间的区别是什么？

抽象方法不提供实现，并且强制派生类重写该方法(除非派生类也是个抽象类)，
而虚方法可以有实现并且在派生类中重写与否是可选的。因此虚方法可以实现并提供了派生类重写的选择。
抽象方法不能提供实现并且强制派生类重写该方法。

110. 编译时多态性和运行时多态性的区别是什么？

编译时多态性

编译时多态性也被称为方法重载。

方法重载是指有两个或更多同名但含有不同签名的方法。

运行时多态性

运行时多态性也被称为方法重写。

方法重写是指有两个或更多的同名方法，含有相同的方法签名但对应不同的实现。


106. C#支持可变数目的参数吗？

是的，使用params关键字。

该参数指定为特定类型的参数列表，例如，int。为了最大的灵活性，类型可以是object。

使用这种方法的标准例子是System.console.writeLine()。


102. 事件可以用访问修饰符吗？

可以，你可以在事件中用访问修饰符。你可以对事件使用portected关键字，这样只允许继承类访问。你可以使用private修饰事件，仅可以供当前类对象访问。





101. 投影(Shadowing)和重写(overriding)的区别是什么？

重写仅仅重定义实现而投影重定义整个元素。

重写派生类可以通过“ME”关键字引用父类元素，但投影中你可以通过”MYBASE”访问父类元素。


90. 子程序和函数的主要区别是什么？

子程序没有返回值，而函数有。



85. 事件是什么？

事件是一个基于另一个程序方法执行的动作。

事件是被对象或者类使用来通知其他对象发生的事件的委托类型类成员。


75. 什么是多播委托？

每个委托对象保持对一个单独方法的引用。但是，一个委托对象保持对多个方法的引用并调用它们是可能的。这样的委托对象成为多播委托或者组合委托。
事件可以通过event关键字来声明。


71. Array和LinkedList之间的区别是什么？

数组是不关心彼此元素位置的简单数字序列。他们之间的位置彼此独立。增加，删除或者修改任何数组元素都是非常容易的。相对于数组，链表是一个复杂的数字序列。



C#中不同的变量类型是：

静态变量(static variables)
实例变量(instance variable)
值参数(value parameters)
引用参数(reference parameters)
数组元素(array elements)
输出参数(output parameters)
局部变量(local variables)


55. 什么是代码组？

代码组是一组共享安全上下文的套件。



52. 错误的类型是什么？

语法错误(Syntax error)
逻辑错误(Logic error)
运行时错误(Runtime error)


45. 自定义控件和用户控件之间的区别是什么？

自定义控件是编译后的代码(Dlls)，容易使用，创建困难，可以放在工具箱。拖拉使用的控件。

属性可以直观地在设计时指定。可以被多个应用程序使用(如果共享Dlls)，即使是私有的也能拷贝到web应用程序的bin目录，添加引用和使用。通常是用来为独立的消费应用程序提供公用功能。

用户控件和ASP的include文件，轻松创建，不能放置在箱中来拖拉放置它。用户控件在单个应用程序文件之间共享。


44. 有哪些缓存的种类？

有三种类型的缓存：

输出缓存(Output Caching):存储asp.net页面的应答信息。

片段缓存(Fragment Caching):仅缓存/存储部分页面内容(用户控制)。

数据缓存(Data Caching):为了性能通过编程的方式来缓存对象。


38. constants、readonly和static之间的区别是什么？

Constants: 值不能变。

Read-only: 值在类的构造函数中仅仅初始化一次。

Static: 值可以被初始化一次。


34. 什么是委托？

委托是类型安全，面向对象的函数指针的实现，并且在许多一个组件需要回调到使用它的组件这样的情况下使用。


31. 什么是序列化？

序列化(Serialization)是将对象转换为字节流的过程。

反序列化(De-serialization)是从字节流创建对象这样相反的过程。


29. ref和out参数之间的区别是什么？

传递给ref参数的参数必须先初始化。与此相比，对out参数来说，在参数传递给out参数之前不需要显示初始化。



web service 
它是基于SOAP格式的肥皂和返回数据。
2，它只支持HTTP协议。
3、它不是开源的，但是可以被任何一个能理解的客户所消耗。
4，它可以在IIS托管。

WCF：
1、也以SOAP形式的肥皂和返回数据为基础。

2，它是Web服务的演变（ASMX）和支持各种协议，如TCP，HTTP，HTTPS，命名管道，消息队列。

3。WCF的主要问题是，它的繁琐和广泛的配置。

4、它不是开源的，但是可以被任何一个能理解的客户所消耗。

5。可以托管在应用或在IIS或使用窗口服务。

WCF  REST:
使用WCF WCF服务你要使webhttpbindings休息。
2，它支持HTTP GET和POST动词[ webget ]和[ webinvoke ]属性分别。

3。使其他HTTP动词你必须做一些配置IIS接受特定的动词对SVC文件的请求。

4，通过数据使用webget需要通过参数配置。必须指定的uritemplate

5，它支持XML，JSON数据格式和原子。

WEB API
1。这是容易和简单的方式建立HTTP服务的新框架。

2。Web API的开放源代码构建REST服务在一个理想的平台。NET框架。

3。与WCF REST服务，它使用HTTP的全部特征（如URI请求/响应头，缓存版本，各种格式的内容）

4，它也支持MVC功能，如路由、控制器、动作结果，滤波器模型的粘合剂，IOC容器和依赖注入，单元测试，使它更简单和鲁棒性。

5。可以托管在应用程序或在IIS。

6、它是一种重量轻、结构好的设备，其带宽有限，像智能手机。

7。响应的Web API的mediatypeformatter成JSON格式，XML或其他格式你想添加一个mediatypeformatter。




REST API 和WebService有哪些不同？，两者彼此的优略势是什么？
从基本原理层次上说，REST 样式和 SOAP 样式 Web Service的区别取决于应用程序是面向资源的还是面向活动的。例如，在传统的WebService中，一个获得天气预报的webservice会暴露一个WebMethod：string GetCityWether（string city）。而RESTful WebService暴露的不是方法，而是对象（资源），通过Http GET, PUT, POST 或者 DELETE来对请求的资源进行操作。在 REST 的定义中，一个 Web Service总是使用固定的 URI 向外部世界呈现（或者说暴露）一个资源。可以说这是一种全新的思维模式：使用唯一资源定位地址 URI，加上 HTTP 请求方法从而达到对一个发布于互联网资源的唯一描述和操作。
所以我理解为rest架构定义的webservice实际上定义了一个借口的规范。
  REST其实并不是什么协议也不是什么标准，而是将Http协议的设计初衷作了诠释，在Http协议被广泛利用的今天，越来越多的是将其作为传输协议，而非原先设计者所考虑的应用协议。
REST的思想归结以下有如下几个关键点：

1．面向资源的接口设计

所有的接口设计都是针对资源来设计的，也就很类似于我们的面向对象和面向过程的设计区别，只不过现在将网络上的操作实体都作为资源来看待，同时URI的设计也是体现了对于资源的定位设计。后面会提到有一些网站的API设计说是REST设计，其实是RPC-REST的混合体，并非是REST的思想。

       2．抽象操作为基础的CRUD

       这点很简单，Http中的get,put,www.hbbz08.com post,delete分别对应了read,update,create,delete四种操作，如果仅仅是作为对于资源的操作，抽象成为这四种已经足够了，但是对于现在的一些复杂的业务服务接口设计，可能这样的抽象未必能够满足。其实这也在后面的几个网站的API设计中暴露了这样的问题，如果要完全按照REST的思想来设计，那么适用的环境将会有限制，而非放之四海皆准的。      

       3．Http是应用协议而非传输协议

       这点在后面各大网站的API分析中有很明显的体现，其实有些网站已经走到了SOAP的老路上，说是REST的理念设计，其实是作了一套私有的SOAP协议，因此称之为REST风格的自定义SOAP协议。

4．无状态，自包含

这点其实不仅仅是对于REST来说的，作为接口设计都需要能够做到这点，也是作为可扩展和高效性的最基本的保证，就算是使用SOAP的WebService也是一样。
